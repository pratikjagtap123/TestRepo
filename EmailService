using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DOAE.MODEL;
using DOAE.DAL;
using DOAE.COMMON;
using System.Web;
using System.Configuration;
namespace DOAE.CORE
{
    public class
        EmailService : IEmailService
    {
        IEmailTemplateMasterService _IEmailTemplateMasterService = null;
        InstallationRequestService _InstallationRequestService = null;
        IUserService _IUserService = null;
        IIndCustomerService _IIndCustomerService = null;
        ICodeUnblockingMasterService _ICodeUnblockingMasterService = null;
        ICodeCreationMasterService _ICodeCreationMasterService = null;
        IInfraPickDetailsMasterService _IInfraPickDetailsMasterService = null;
        IInfraPicFilesService _IInfraPicFilesService = null;
        IDealerExitService _IDealerExitService = null;
        IExhibitParameterTrackerService _IExhibitParameterTrackerService = null;
        IDealerExitCheckListService _IDealerExitCheckListService = null;
        public EmailService(IEmailTemplateMasterService IEmailTemplateMasterService, InstallationRequestService InstallationRequestService, IUserService IUserService, IIndCustomerService IIndCustomerService,
            ICodeUnblockingMasterService ICodeUnblockingMasterService, ICodeCreationMasterService ICodeCreationMasterService, IInfraPickDetailsMasterService IInfraPickDetailsMasterService,
            IInfraPicFilesService IInfraPicFilesService, IDealerExitService IDealerExitService, IDealerExitCheckListService IDealerExitCheckListService,
            IExhibitParameterTrackerService IExhibitParameterTrackerService
            )
        {
            _IEmailTemplateMasterService = IEmailTemplateMasterService;
            _InstallationRequestService = InstallationRequestService;
            _IUserService = IUserService;
            _IIndCustomerService = IIndCustomerService;
            _ICodeUnblockingMasterService = ICodeUnblockingMasterService;
            _ICodeCreationMasterService = ICodeCreationMasterService;
            _IInfraPickDetailsMasterService = IInfraPickDetailsMasterService;
            _IInfraPicFilesService = IInfraPicFilesService;
            _IDealerExitService = IDealerExitService;
            _IDealerExitCheckListService = IDealerExitCheckListService;
            _IExhibitParameterTrackerService = IExhibitParameterTrackerService;
        }
        public void SendSDNSubmiitedEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.SDNSUBMITTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);


                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }


                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));


                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = "/Images/email-logo.png";
                    string imgEmailHeader = "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + loginUrl + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + loginUrl + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();

                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailSubject = strEmailSubject,
                            EmailType = emailTemplateMaster.EmailType
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendSDNActionEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_SDNACTION;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    string EmailSubjectStatus = objinstallationRequest.SDNStatus;
                    string EmailBodyStatus = objinstallationRequest.SDNStatus;
                    if (!string.IsNullOrEmpty(objinstallationRequest.SDNStatus) && objinstallationRequest.SDNStatus.ToLower() == CommonKeys.SDN_APPROVED.ToLower())
                    {
                        EmailSubjectStatus = "Approved";
                        EmailBodyStatus = "Approved";
                    }
                    else if (!string.IsNullOrEmpty(objinstallationRequest.SDNStatus) && objinstallationRequest.SDNStatus.ToLower() == CommonKeys.SDN_REJECTED.ToLower())
                    {
                        EmailSubjectStatus = "Rejected";
                        EmailBodyStatus = "Rejected";
                    }

                    strEmailSubject = strEmailSubject.Replace("<%Status%>", EmailSubjectStatus);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%SDNRemarks%>"))
                        emailBody = emailBody.Replace("<%SDNRemarks%>", Convert.ToString(objinstallationRequest.SDNRemarks));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", EmailBodyStatus);


                    string imgEmailLogo = "/Images/email-logo.png";
                    string imgEmailHeader = "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + loginUrl + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + loginUrl + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void PFSSubmissionEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_PFSSUBMIITED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.SDNStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType
                            ,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }


        public void PFSRevisionRequestedEmails(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.PFS_REVISION_REQUESTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.SDNStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%PFSRemarks%>"))
                        emailBody = emailBody.Replace("<%PFSRemarks%>", Convert.ToString(objinstallationRequest.PFSRemarks));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.PFSStatus));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType
                            ,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void PFSRevisionUpdatedEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.PFS_REVISION_SUBMIITED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.PFSStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType
                              ,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void PFSActionTaken(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.PFS_APPROVED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    //strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.PFSStatus));
                    if (strEmailSubject.Contains("<%Status%>"))
                        if (!string.IsNullOrEmpty(objinstallationRequest.PFSStatus) && objinstallationRequest.PFSStatus.ToLower() == CommonKeys.PFSSTATUS_APPROVED.ToLower())
                        {
                            strEmailSubject = strEmailSubject.Replace("<%Status%>", "PFS Approved");
                        }
                        else if (!string.IsNullOrEmpty(objinstallationRequest.PFSStatus) && objinstallationRequest.PFSStatus.ToLower() == CommonKeys.PFSSTATUS_REJECTED.ToLower())
                        {
                            strEmailSubject = strEmailSubject.Replace("<%Status%>", "PFS Rejected");
                        }
                        else
                        {
                            strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.PFSStatus));
                        }

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    if (emailBody.Contains("<%PFSRemarks%>"))
                        emailBody = emailBody.Replace("<%PFSRemarks%>", Convert.ToString(objinstallationRequest.PFSRemarks));

                    if (emailBody.Contains("<%Status%>"))
                    {
                        if (!string.IsNullOrEmpty(objinstallationRequest.PFSStatus) && objinstallationRequest.PFSStatus.ToLower() == CommonKeys.PFSSTATUS_APPROVED.ToLower())
                        {
                            emailBody = emailBody.Replace("<%Status%>", "PFS has been approved");
                        }
                        else if (!string.IsNullOrEmpty(objinstallationRequest.PFSStatus) && objinstallationRequest.PFSStatus.ToLower() == CommonKeys.PFSSTATUS_REJECTED.ToLower())
                        {
                            emailBody = emailBody.Replace("<%Status%>", "PFS has been rejected");
                        }
                        else
                        {
                            emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.PFSStatus));
                        }
                    }
                    if (emailBody.Contains("<%ifPFSApproved%>"))
                    {
                        if (!string.IsNullOrEmpty(objinstallationRequest.PFSStatus) && objinstallationRequest.PFSStatus.ToLower() == CommonKeys.PFSSTATUS_APPROVED.ToLower())
                        {
                            emailBody = emailBody.Replace("<%ifPFSApproved%>", "Please do the needful to upload dealer documents for PFA");
                        }
                        else
                        {
                            emailBody = emailBody.Replace("<%ifPFSApproved%>", "");
                        }
                    }



                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType
                             ,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendCustomerSubmiitedEmail(IndCustomer indCustomer)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                IndCustomer objIndCustomer = new IndCustomer();
                objIndCustomer.CustomerId = indCustomer.CustomerId;
                objIndCustomer = _IIndCustomerService.GetIndividualCustomerDetails(objIndCustomer);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.IND_CUST_SUBMITTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { CustomerId = objIndCustomer.CustomerId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objIndCustomer.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objIndCustomer.Name));


                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objIndCustomer.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();

                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            CustomerId = objIndCustomer.CustomerId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendCodeCreationSubmissionEmail(InstallationRequest installationRequest)
        {

            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.CODECREATION_SUBMITTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendCodeCreationCommunicationEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                CodeCreationMaster ObjCodeC = new CodeCreationMaster();
                ObjCodeC.InstallationId = installationRequest.InstallationId;
                ObjCodeC = _ICodeCreationMasterService.Get(ObjCodeC);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.CODECREATION_COMMUNICATION;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string strMsg = "Complete accounting view pendency and initiate code unblocking sheet.";
                    if (objinstallationRequest.RequestType != null && objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                    {
                        //strMsg = "Initiate code unblocking sheet if not initiated.";
                        strMsg = "";
                    }
                    else if (objinstallationRequest.RequestType != null && objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_DISTRIBUTOR.ToLower())
                    {
                        strMsg = "Complete accounting view pendency.";
                    }
                    if (emailBody.Contains("<%Description%>"))
                        emailBody = emailBody.Replace("<%Description%>", strMsg);

                    emailBody = emailBody.Replace("<%strCodeCommunicationDate%>", ObjCodeC.strCodeCommunicationDate);
                    emailBody = emailBody.Replace("<%DealerShipLegalName%>", ObjCodeC.DealerShipLegalName);
                    emailBody = emailBody.Replace("<%BusinessType%>", ObjCodeC.BusinessType);
                    emailBody = emailBody.Replace("<%PhysicalAddress%>", ObjCodeC.PhysicalAddress);
                    emailBody = emailBody.Replace("<%MailingAddress%>", ObjCodeC.MailingAddress);
                    emailBody = emailBody.Replace("<%FianancialAddress%>", ObjCodeC.FianancialAddress);

                    string CityStatePostal = ObjCodeC.City + "/ " + ObjCodeC.StateName + "/ " + ObjCodeC.PostalCode;
                    emailBody = emailBody.Replace("<%CityStatePostal%>", CityStatePostal);

                    emailBody = emailBody.Replace("<%DeereToDealerEmail%>", ObjCodeC.DeereToDealerEmail);
                    emailBody = emailBody.Replace("<%BuisnessPhone%>", ObjCodeC.BuisnessPhone);
                    emailBody = emailBody.Replace("<%FaxNumber%>", "");
                    emailBody = emailBody.Replace("<%ParentStoreName%>", ObjCodeC.ParentStoreName);
                    emailBody = emailBody.Replace("<%ParentStoreAccount%>", ObjCodeC.ParentStoreAccount);
                    emailBody = emailBody.Replace("<%Explanation%>", ObjCodeC.TehsilName);
                    emailBody = emailBody.Replace("<%ProductAgrrementType%>", ObjCodeC.ProductAgrrementType);
                    emailBody = emailBody.Replace("<%CorporateName%>", ObjCodeC.DealerShipLegalName);
                    emailBody = emailBody.Replace("<%IncorporationDate%>", ObjCodeC.strCodeCommunicationDate);

                    //emailBody = emailBody.Replace("<%Unit%>", ObjCodeC.Unit);
                    //emailBody = emailBody.Replace("<%DivTy%>", ObjCodeC.DivTy);
                    emailBody = emailBody.Replace("<%AccountFlexCode%>", ObjCodeC.AccountFlexCode);
                    emailBody = emailBody.Replace("<%SapCode%>", ObjCodeC.SapCode);

                    emailBody = emailBody.Replace("<%GSTFirm%>", ObjCodeC.GSTFirm);
                    emailBody = emailBody.Replace("<%PanFirm%>", ObjCodeC.PanFirm);
                    //emailBody = emailBody.Replace("<%PartsDepot%>", ObjCodeC.PartsDepot);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendCodeCreationRevisionEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.CODECREATION_REVISION;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%CodeCreationRemarks%>"))
                        emailBody = emailBody.Replace("<%CodeCreationRemarks%>", Convert.ToString(objinstallationRequest.CodeCreationRemarks));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendCodeCreationRevisionUpdatedEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.CODECREATION_REVISIONSUBMITTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }
        public void SendDocsSubmiitedEmail(InstDocTracker instDocTracker, User SerViceUser = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();

            if (SerViceUser != null)
            {
                LoggedInUser = SerViceUser;
                strFromEmail = SerViceUser.EmailAddress;
            }
            else if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DOCUMENTS_SUBMITTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }


        public void SendAccouningViewDocsSubmissionEmail(InstallationRequest installationRequest, User objUser = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();

            if (objUser != null)
            {
                LoggedInUser = objUser;
                strFromEmail = LoggedInUser.EmailAddress;
            }
            else if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.ACC_SUBMIITED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }
        public void SendAccountingViewRevisionSubmission(InstallationRequest installationRequest, User objUser = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();

            if (objUser != null)
            {
                LoggedInUser = objUser;
                strFromEmail = LoggedInUser.EmailAddress;
            }
            else if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.ACC_REVISION;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendDocsRevisionRequestedEmails(InstDocTracker instDocTracker)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DOCUMENTS_REVISIONREQUIRED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%WscRemarks%>"))
                        emailBody = emailBody.Replace("<%WscRemarks%>", Convert.ToString(objinstallationRequest.WscRemarks));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }
        public void SendDocsRevisionUpdatedEmail(InstDocTracker instDocTracker, User objUser = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (objUser != null)
            {
                LoggedInUser = objUser;
                strFromEmail = LoggedInUser.EmailAddress;
            }
            else if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DOCUMENTS_REVISIONSUBMITTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendAccountingViewRevisionRequestedEmails(InstDocTracker instDocTracker)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.ACC_REVISIONREQUIRED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.AccountViewStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%AccInitiatedRemarks%>"))
                        emailBody = emailBody.Replace("<%AccInitiatedRemarks%>", Convert.ToString(objinstallationRequest.AccInitiatedRemarks));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.AccountViewStatus));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendAccountingViewActionEmail(InstDocTracker instDocTracker)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.ACC_APPROVAL;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.AccountViewStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%AccInitiatedRemarks%>"))
                        emailBody = emailBody.Replace("<%AccInitiatedRemarks%>", Convert.ToString(objinstallationRequest.AccInitiatedRemarks));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.AccountViewStatus));


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }


        public void SendCodeCreationCommunicationEmailAccounting(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.ACCVIEW_EMAIL;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendCodeCreationCommunicationEmailPricing(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.CDVIEW_EMAIL;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendDocsPFAApproveEmail(InstDocTracker instDocTracker)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DOCUMENTS_APPROVED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%WscRemarks%>"))
                        emailBody = emailBody.Replace("<%WscRemarks%>", Convert.ToString(objinstallationRequest.WscRemarks));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendDocsPFARejectEmail(InstDocTracker instDocTracker)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DOCUMENTS_REJECTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));
                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%WscRemarks%>"))
                        emailBody = emailBody.Replace("<%WscRemarks%>", Convert.ToString(objinstallationRequest.WscRemarks));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendDeviationApproveEmail(InstDocTracker instDocTracker)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DEVIATION_APPROVED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%SDNRemarks%>"))
                        emailBody = emailBody.Replace("<%SDNRemarks%>", Convert.ToString(objinstallationRequest.PFAReport));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendDeviationRejectEmail(InstDocTracker instDocTracker)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DEVIATION_REJECTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    if (emailBody.Contains("<%DDHeadRemarks%>"))
                        emailBody = emailBody.Replace("<%DDHeadRemarks%>", Convert.ToString(objinstallationRequest.DDHeadRemarks));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.DocumentStatus));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendInfraPicSubmiisionEmail(InstallationRequest installationRequest, string Status, User serviceUser = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (serviceUser != null)
            {
                LoggedInUser = serviceUser;
                strFromEmail = serviceUser.EmailAddress;
            }
            else if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                if (Status.ToLower() == CommonKeys.INFRAPIC_STATUS_REVISOIN.ToLower())
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_REVISION_SUBMITED;
                else
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_SUBMITED;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                    {
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    string strMsgSub = "Case Logged for Code Unblocking";
                    string strMsgBody = "For Infra Verification and Code Unblocking.";
                    if (objinstallationRequest.RequestType != null && objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                    {
                        strMsgSub = "Case Logged for Infra Verification";
                        strMsgBody = "For Infra Verification.";
                    }
                    if (strEmailSubject.Contains("<%SubUnblockingorInfraPic%>"))
                        strEmailSubject = strEmailSubject.Replace("<%SubUnblockingorInfraPic%>", strMsgSub);

                    if (emailBody.Contains("<%BodyUnblockingorInfraPic%>"))
                        emailBody = emailBody.Replace("<%BodyUnblockingorInfraPic%>", strMsgBody);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SenInfraPicReviewedEmail(InstallationRequest installationRequest, string Status)
        {

            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                //CodeUnblockingMaster objCodeUnblockingMaster = new CodeUnblockingMaster();
                //objCodeUnblockingMaster.InstallationId = installationRequest.InstallationId;
                //objCodeUnblockingMaster = _ICodeUnblockingMasterService.Get(objCodeUnblockingMaster);
                //installationRequest.DDAdminRemarks = objCodeUnblockingMaster.DDAdminRemarks;

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                if (Status.ToLower() == CommonKeys.INFRAPIC_STATUS_REVISOIN.ToLower())
                {
                    if (objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                    {
                        emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_REVISION_REQUIRED_BRANCH;
                    }
                    else
                    {
                        emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_REVISION_REQUIRED;
                    }
                }
                else
                {
                    if (objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                        emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_REVIEWED_BRANCH;
                    else
                        emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_REVIEWED;
                }

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    if (emailBody.Contains("<%Remarks%>"))
                        emailBody = emailBody.Replace("<%Remarks%>", Convert.ToString(objinstallationRequest.DDAdminRemarks));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendCDViewMaintainedEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.CDVIEW_MAINTAINED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));


                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendInfraPicApprovedEmail(InstallationRequest installationRequest, string Status)
        {

            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                //CodeUnblockingMaster objCodeUnblockingMaster = new CodeUnblockingMaster();
                //objCodeUnblockingMaster.InstallationId = installationRequest.InstallationId;
                //objCodeUnblockingMaster = _ICodeUnblockingMasterService.Get(objCodeUnblockingMaster);
                //installationRequest.DDHeadRemarks = objCodeUnblockingMaster.DDHeadRemarks;

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                if (Status.ToLower() == CommonKeys.INFRAPIC_STATUS_APPROVED.ToLower())
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_APPROVED;
                else
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_REVISION_REQUESTED;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    string msgbody = "for code unblocking/ Infra pics has been approved.";
                    string msgstatus = "for Infra Pics/Exihibit Para B revision has been requested";
                    if (objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                    {
                        msgbody = "for Infra pics has been approved.";
                        msgstatus = "for Infra Pics revision has been requested";
                    }

                    if (emailBody.Contains("<%msgbody%>"))
                        emailBody = emailBody.Replace("<%msgbody%>", msgbody);

                    if (emailBody.Contains("<%msgstatus%>"))
                        emailBody = emailBody.Replace("<%msgstatus%>", msgstatus);


                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    if (emailBody.Contains("<%Remarks%>"))
                        emailBody = emailBody.Replace("<%Remarks%>", Convert.ToString(objinstallationRequest.DDHeadInfraRemarks));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendIndCustomerRevisionRequestedEmail(IndCustomer indCustomer)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                IndCustomer objIndCustomer = new IndCustomer();
                objIndCustomer.CustomerId = indCustomer.CustomerId;
                objIndCustomer = _IIndCustomerService.GetIndividualCustomerDetails(objIndCustomer);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.IND_CUST_REVISION_REQUIRED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { CustomerId = objIndCustomer.CustomerId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objIndCustomer.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objIndCustomer.Name));


                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objIndCustomer.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    if (emailBody.Contains("<%Remarks%>"))
                        emailBody = emailBody.Replace("<%Remarks%>", Convert.ToString(objIndCustomer.FinanceControllerCommnet));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();

                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            CustomerId = objIndCustomer.CustomerId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendIndCustomerRevisionSubmissionEmail(IndCustomer indCustomer)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                IndCustomer objIndCustomer = new IndCustomer();
                objIndCustomer.CustomerId = indCustomer.CustomerId;
                objIndCustomer = _IIndCustomerService.GetIndividualCustomerDetails(objIndCustomer);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.IND_CUST_REVISION_SUBMITTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { CustomerId = objIndCustomer.CustomerId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objIndCustomer.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objIndCustomer.Name));


                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objIndCustomer.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    //if (emailBody.Contains("<%Remarks%>"))
                    //    emailBody = emailBody.Replace("<%Remarks%>", Convert.ToString(objIndCustomer.FinanceControllerCommnet));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();

                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            CustomerId = objIndCustomer.CustomerId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendIndCustomerApprovedEmail(IndCustomer indCustomer)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                IndCustomer objIndCustomer = new IndCustomer();
                objIndCustomer.CustomerId = indCustomer.CustomerId;
                objIndCustomer = _IIndCustomerService.GetIndividualCustomerDetails(objIndCustomer);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.IND_CUST_APPROVED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { CustomerId = objIndCustomer.CustomerId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objIndCustomer.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objIndCustomer.Name));


                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objIndCustomer.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    //if (emailBody.Contains("<%Remarks%>"))
                    //    emailBody = emailBody.Replace("<%Remarks%>", Convert.ToString(objIndCustomer.FinanceControllerCommnet));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();

                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            CustomerId = objIndCustomer.CustomerId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendIndCustomerCodeCommunicatedEmail(IndCustomer indCustomer)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                IndCustomer objIndCustomer = new IndCustomer();
                objIndCustomer.CustomerId = indCustomer.CustomerId;
                objIndCustomer = _IIndCustomerService.GetIndividualCustomerDetails(objIndCustomer);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.IND_CUST_CODE_COMMUNICATED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { CustomerId = objIndCustomer.CustomerId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objIndCustomer.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objIndCustomer.Name));


                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objIndCustomer.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    //if (emailBody.Contains("<%Remarks%>"))
                    //    emailBody = emailBody.Replace("<%Remarks%>", Convert.ToString(objIndCustomer.FinanceControllerCommnet));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();

                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            CustomerId = objIndCustomer.CustomerId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendIndCustomerCaseCloseEmail(IndCustomer indCustomer)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                IndCustomer objIndCustomer = new IndCustomer();
                objIndCustomer.CustomerId = indCustomer.CustomerId;
                objIndCustomer = _IIndCustomerService.GetIndividualCustomerDetails(objIndCustomer);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.IND_CUST_CASE_CLOSE;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { CustomerId = objIndCustomer.CustomerId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objIndCustomer.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objIndCustomer.GeoLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objIndCustomer.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objIndCustomer.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objIndCustomer.Name));


                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objIndCustomer.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    //if (emailBody.Contains("<%Remarks%>"))
                    //    emailBody = emailBody.Replace("<%Remarks%>", Convert.ToString(objIndCustomer.FinanceControllerCommnet));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();

                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            CustomerId = objIndCustomer.CustomerId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendInfraPicDBMDeviationApprovedEmail(InstallationRequest installationRequest, string MailTo, string DealerEmailId = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                CodeUnblockingMaster objCodeUnblockingMaster = new CodeUnblockingMaster();
                objCodeUnblockingMaster.InstallationId = installationRequest.InstallationId;
                objCodeUnblockingMaster = _ICodeUnblockingMasterService.Get(objCodeUnblockingMaster);

                InfraPicFiles infraPicFiles = new InfraPicFiles();
                infraPicFiles.InstallationId = installationRequest.InstallationId;
                List<InfraPicFiles> lstinfraPicFilesList = _IInfraPicFilesService.GetAll(infraPicFiles).ToList();
                lstinfraPicFilesList = lstinfraPicFilesList.Where(x => x.FileStatus.ToLower() == CommonKeys.INFRAPIC_FILE_REJECTED.ToLower()).ToList();

                List<ExhibitParameterTracker> lstExhibitParaTrack = _IExhibitParameterTrackerService.GetAll(new ExhibitParameterTracker() { InstallationId = installationRequest.InstallationId }).ToList();
                lstExhibitParaTrack = lstExhibitParaTrack.Where(x => x.DDHeadStatus == CommonKeys.EXHIBIT_REJECTED).OrderBy(x => x.ExibitHeadName).ThenBy(x => x.ParameterName).ToList(); EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_DBMDEVIATIONAPPROVED;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

                List<User> emailUsers = new List<User>();
                if (string.IsNullOrEmpty(DealerEmailId))
                    emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                else
                    emailUsers = new List<User>() { new User() { EmailAddress = DealerEmailId } };

                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));

                    if (emailBody.Contains("<%MailTo%>"))
                        emailBody = emailBody.Replace("<%MailTo%>", MailTo);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%Remarks%>"))
                        emailBody = emailBody.Replace("<%Remarks%>", Convert.ToString(objinstallationRequest.DBMRemarks));


                    StringBuilder sb = new StringBuilder();

                    sb.Append("<table style='border:1px solid #000 ;border-collapse:collapse''><tr><th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Infra Document Name</th>");
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> File Name</th>");
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> DBM Remarks</th>");
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Due Date</th>");
                    sb.Append("</tr>");
                    foreach (InfraPicFiles InfraPicFiles in lstinfraPicFilesList)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.DocumentName + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.FileName + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.DBMRemarks + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.ActionCompDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                        sb.Append("</tr>");
                    }
                    sb.Append("</table>");

                    if (emailBody.Contains("<%ActionList%>"))
                        emailBody = emailBody.Replace("<%ActionList%>", sb.ToString());

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendInfraPicDBMDeviationApprovedBranchEmail(InstallationRequest installationRequest, string MailTo, string DealerEmailId = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                //CodeUnblockingMaster objCodeUnblockingMaster = new CodeUnblockingMaster();
                //objCodeUnblockingMaster.InstallationId = installationRequest.InstallationId;
                //objCodeUnblockingMaster = _ICodeUnblockingMasterService.Get(objCodeUnblockingMaster);

                InfraPicFiles infraPicFiles = new InfraPicFiles();
                infraPicFiles.InstallationId = installationRequest.InstallationId;
                List<InfraPicFiles> lstinfraPicFilesList = _IInfraPicFilesService.GetAll(infraPicFiles).ToList();
                lstinfraPicFilesList = lstinfraPicFilesList.Where(x => x.FileStatus.ToLower() == CommonKeys.INFRAPIC_FILE_REJECTED.ToLower()).ToList();

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_DBMDEVIATIONAPPROVED_BRANCH;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

                List<User> emailUsers = new List<User>();
                if (string.IsNullOrEmpty(DealerEmailId))
                    emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                else
                    emailUsers = new List<User>() { new User() { EmailAddress = DealerEmailId } };

                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));

                    if (emailBody.Contains("<%MailTo%>"))
                        emailBody = emailBody.Replace("<%MailTo%>", MailTo);

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%Remarks%>"))
                        emailBody = emailBody.Replace("<%Remarks%>", Convert.ToString(objinstallationRequest.DBMRemarks));


                    StringBuilder sb = new StringBuilder();

                    sb.Append("<table style='border:1px solid #000 ;border-collapse:collapse''><tr><th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Infra Document Name</th>");
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> File Name</th>");
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> DBM Remarks</th>");
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Due Date</th>");
                    sb.Append("</tr>");
                    foreach (InfraPicFiles InfraPicFiles in lstinfraPicFilesList)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.DocumentName + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.FileName + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.DBMRemarks + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.ActionCompDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                        sb.Append("</tr>");
                    }
                    sb.Append("</table>");

                    if (emailBody.Contains("<%ActionList%>"))
                        emailBody = emailBody.Replace("<%ActionList%>", sb.ToString());

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }
        public void SendActionCompletedEmail(InstallationRequest installationRequest, string InfraPicFileId = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                InfraPicFiles infraPicFiles = new InfraPicFiles();
                infraPicFiles.InfraPicFileId = InfraPicFileId;
                infraPicFiles.InstallationId = installationRequest.InstallationId;
                infraPicFiles.FileStatus = CommonKeys.INFRAPIC_FILE_ACTION_SUBMITTED;
                List<InfraPicFiles> lstinfraPicFilesList = _IInfraPicFilesService.GetActiontakenItems(infraPicFiles).ToList();

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                if (objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DEVIATION_ACTION_INITIATOR_BRANCH;
                else
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DEVIATION_ACTION_INITIATOR;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;

                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));



                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    StringBuilder sb = new StringBuilder();
                    List<InfraPicFiles> lstinfraPicFiles = new List<InfraPicFiles>();

                    sb.Append("<table style='border:1px solid #000 ;border-collapse:collapse''><tr><th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Infra Document Name</th>");
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> File Name</th>");
                    if (objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                    {
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> DCSM Remarks</th>");
                    }
                    else
                    {
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> DDHead Remarks</th>");
                    }
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Due Date</th>");
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Action Completed Date</th>");
                    sb.Append("</tr>");
                    foreach (InfraPicFiles InfraPicFiles in lstinfraPicFilesList)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.DocumentName + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.FileName + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.DDHeadRemarks + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.ActionCompDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.ActionCompletedDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                        sb.Append("</tr>");
                    }
                    sb.Append("</table>");

                    if (emailBody.Contains("<%ActionList%>"))
                        emailBody = emailBody.Replace("<%ActionList%>", sb.ToString());

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";


                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }

        }

        public void SendInfraPicDeviationApprovedEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_DEVIATIONAPPROVED;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendCodeUnblockedEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.CODEUNBLOCKED_EMAIL;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendActionItemsClosedRevisionRequestedEmail(InstallationRequest installationRequest, string InfraPicFileId = null, List<InfraPicFiles> lstinfraPicFilesList = null, string Status = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                if (Status == "Revision")
                {
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_INFRAACTIONITEMS_REVISION;
                    lstinfraPicFilesList = lstinfraPicFilesList.Where(x => x.FileDeviationStatus == CommonKeys.INFRAPIC_FILE_ACTION_REUPLOD).ToList();
                }
                else
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_INFRAACTIONITEMS_CLOSED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;

                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));


                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    StringBuilder sb = new StringBuilder();
                    List<InfraPicFiles> lstinfraPicFiles = new List<InfraPicFiles>();
                    sb.Append("<table style='border:1px solid #000 ;border-collapse:collapse''><tr><th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Infra Document Name</th>");
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> File Name</th>");
                    if (objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                    {
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> DCSM Remarks</th>");
                    }
                    else
                    {
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> DDHead Remarks</th>");
                    }
                    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Due Date</th>");
                    sb.Append("</tr>");
                    foreach (InfraPicFiles InfraPicFiles in lstinfraPicFilesList)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.DocumentName + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.FileName + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.DDHeadRemarks + "</td>");
                        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + InfraPicFiles.ActionCompDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                        sb.Append("</tr>");
                    }
                    sb.Append("</table>");

                    if (emailBody.Contains("<%ActionList%>"))
                        emailBody = emailBody.Replace("<%ActionList%>", sb.ToString());

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";


                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendDDDealeExitInitiatedEmail(string ExitId)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                DealerExit dealerExit = new DealerExit();
                dealerExit.ExitId = ExitId;
                dealerExit = _IDealerExitService.Get(dealerExit);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_EXIT_DD_INITIATED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendExitEmails(new User() { ExitId = dealerExit.ExitId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();

                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;

                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%DealerName%>", Convert.ToString(dealerExit.DealerName));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%DealerSapCode%>", Convert.ToString(dealerExit.DealerSapCode));


                    if (emailBody.Contains("<%ExitCode%>"))
                        emailBody = emailBody.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%DealerSapCode%>"))
                        emailBody = emailBody.Replace("<%DealerSapCode%>", Convert.ToString(dealerExit.DealerSapCode));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(dealerExit.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(dealerExit.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    foreach (User User in emailUsers)
                    {
                        string StrEmail = strEmailBody;

                        if (StrEmail.Contains("<%Group%>"))
                            StrEmail = StrEmail.Replace("<%Group%>", User.GroupName);

                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(User.EmailAddress))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, User.EmailAddress, strCcEmail, strEmailSubject, StrEmail);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                UserId = LoggedInUser.UserId,
                                InstallationId = dealerExit.InstallationId,
                                EmailTo = User.EmailAddress,
                                EmaiFrom = strFromEmail,
                                EmailBody = StrEmail,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }
                }
            }
        }

        public void SendAgreementExecutedEmail(InstallationRequest installationRequest)
        {

            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.AGREEMENT_EXECUTED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendDealeExitInitiatedEmail(string ExitId)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                DealerExit dealerExit = new DealerExit();
                dealerExit.ExitId = ExitId;
                dealerExit = _IDealerExitService.Get(dealerExit);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_EXIT_DEALER_INITIATED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendExitEmails(new User() { ExitId = dealerExit.ExitId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();

                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;

                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%DealerName%>", Convert.ToString(dealerExit.DealerName));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%DealerSapCode%>", Convert.ToString(dealerExit.DealerSapCode));

                    if (emailBody.Contains("<%ExitCode%>"))
                        emailBody = emailBody.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%DealerSapCode%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerSapCode));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(dealerExit.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(dealerExit.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    foreach (User User in emailUsers)
                    {
                        string StrEmail = strEmailBody;
                        if (StrEmail.Contains("<%Group%>"))
                            StrEmail = StrEmail.Replace("<%Group%>", User.GroupName);

                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(User.EmailAddress))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, User.EmailAddress, strCcEmail, strEmailSubject, StrEmail);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                UserId = LoggedInUser.UserId,
                                InstallationId = dealerExit.InstallationId,
                                EmailTo = User.EmailAddress,
                                EmaiFrom = strFromEmail,
                                EmailBody = StrEmail,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }
                }
            }
        }

        public void SendExitTaskCompletedEmail(string ExitId, string GroupName, string IsAllTaskComplete)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();

            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                DealerExit dealerExit = new DealerExit();
                dealerExit.ExitId = ExitId;
                dealerExit = _IDealerExitService.Get(dealerExit);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                if (IsAllTaskComplete == "0")
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_EXIT_INDTASK_COMPLETED;
                else
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_EXIT_ALLTASK_COMPLETED;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendExitEmails(new User() { ExitId = dealerExit.ExitId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;

                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%DealerName%>", Convert.ToString(dealerExit.DealerName));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%DealerSapCode%>", Convert.ToString(dealerExit.DealerSapCode));
                    strEmailSubject = strEmailSubject.Replace("<%GroupName%>", GroupName);

                    if (emailBody.Contains("<%ExitCode%>"))
                        emailBody = emailBody.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%DealerSapCode%>"))
                        emailBody = emailBody.Replace("<%DealerSapCode%>", Convert.ToString(dealerExit.DealerSapCode));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(dealerExit.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(dealerExit.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    foreach (User User in emailUsers)
                    {
                        string StrEmail = strEmailBody;
                        if (StrEmail.Contains("<%Group%>"))
                            StrEmail = StrEmail.Replace("<%Group%>", User.GroupName);

                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(User.EmailAddress))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, User.EmailAddress, strCcEmail, strEmailSubject, StrEmail);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                UserId = LoggedInUser.UserId,
                                InstallationId = dealerExit.InstallationId,
                                EmailTo = User.EmailAddress,
                                EmaiFrom = strFromEmail,
                                EmailBody = StrEmail,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }
                }
            }
        }

        public void SendFNFCompletedEmail(string ExitId)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                DealerExit dealerExit = new DealerExit();
                dealerExit.ExitId = ExitId;
                dealerExit = _IDealerExitService.Get(dealerExit);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_EXIT_FNF_SUBMIT;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendExitEmails(new User() { ExitId = dealerExit.ExitId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();

                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;

                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%DealerName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%ExitCode%>"))
                        emailBody = emailBody.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%DealerSapCode%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerSapCode));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(dealerExit.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(dealerExit.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    foreach (User User in emailUsers)
                    {
                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(User.EmailAddress))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, User.EmailAddress, strCcEmail, strEmailSubject, strEmailBody);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                UserId = LoggedInUser.UserId,
                                InstallationId = dealerExit.InstallationId,
                                EmailTo = User.EmailAddress,
                                EmaiFrom = strFromEmail,
                                EmailBody = strEmailBody,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }
                }
            }
        }

        public void SendFNFPaymentProcessedEmail(string ExitId)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                DealerExit dealerExit = new DealerExit();
                dealerExit.ExitId = ExitId;
                dealerExit = _IDealerExitService.Get(dealerExit);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_EXIT_FNF_PAYMENT_PROCESSED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendExitEmails(new User() { ExitId = dealerExit.ExitId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();

                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;

                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%DealerName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%ExitCode%>"))
                        emailBody = emailBody.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%DealerSapCode%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerSapCode));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(dealerExit.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(dealerExit.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    foreach (User User in emailUsers)
                    {
                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(User.EmailAddress))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, User.EmailAddress, strCcEmail, strEmailSubject, strEmailBody);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                UserId = LoggedInUser.UserId,
                                InstallationId = dealerExit.InstallationId,
                                EmailTo = User.EmailAddress,
                                EmaiFrom = strFromEmail,
                                EmailBody = strEmailBody,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }
                }
            }
        }

        public void SendFNFHandoverEmail(string ExitId)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                DealerExit dealerExit = new DealerExit();
                dealerExit.ExitId = ExitId;
                dealerExit = _IDealerExitService.Get(dealerExit);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_EXIT_FNF_HANDOVER;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendExitEmails(new User() { ExitId = dealerExit.ExitId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();

                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;

                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%DealerName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%ExitCode%>"))
                        emailBody = emailBody.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%DealerSapCode%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerSapCode));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(dealerExit.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(dealerExit.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    foreach (User User in emailUsers)
                    {
                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(User.EmailAddress))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, User.EmailAddress, strCcEmail, strEmailSubject, strEmailBody);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                UserId = LoggedInUser.UserId,
                                InstallationId = dealerExit.InstallationId,
                                EmailTo = User.EmailAddress,
                                EmaiFrom = strFromEmail,
                                EmailBody = strEmailBody,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }
                }
            }
        }

        public void SendFNFIssueLetterEmail(string ExitId)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                DealerExit dealerExit = new DealerExit();
                dealerExit.ExitId = ExitId;
                dealerExit = _IDealerExitService.Get(dealerExit);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_EXIT_FNF_ISSUELETTER;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendExitEmails(new User() { ExitId = dealerExit.ExitId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();

                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;

                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%DealerName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%ExitCode%>"))
                        emailBody = emailBody.Replace("<%ExitCode%>", Convert.ToString(dealerExit.ExitCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(dealerExit.DealerLocation));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(dealerExit.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerName));

                    if (emailBody.Contains("<%DealerSapCode%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(dealerExit.DealerSapCode));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(dealerExit.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(dealerExit.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    foreach (User User in emailUsers)
                    {
                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(User.EmailAddress))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, User.EmailAddress, strCcEmail, strEmailSubject, strEmailBody);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                UserId = LoggedInUser.UserId,
                                InstallationId = dealerExit.InstallationId,
                                EmailTo = User.EmailAddress,
                                EmaiFrom = strFromEmail,
                                EmailBody = strEmailBody,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }
                }
            }
        }

        public void SendTrackorInitiatedEmail(InstallationRequest installationRequest)
        {

            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;


            User LoggedInUser = new User();

            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.TRACKER_INITIATION_EMAIL;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails_Tracker(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;

                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    strEmailSubject = strEmailSubject.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));




                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));



                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = "/Images/email-logo.png";
                    string imgEmailHeader = "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + loginUrl + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + loginUrl + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    foreach (User User in emailUsers)
                    {
                        string StrEmail = strEmailBody;
                        if (StrEmail.Contains("<%Group%>"))
                            StrEmail = StrEmail.Replace("<%Group%>", User.GroupName);

                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(User.EmailAddress))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, User.EmailAddress, strCcEmail, strEmailSubject, StrEmail);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                UserId = LoggedInUser.UserId,
                                InstallationId = installationRequest.InstallationId,
                                EmailTo = User.EmailAddress,
                                EmaiFrom = strFromEmail,
                                EmailBody = StrEmail,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }



                }
            }
        }

        public void Tracker7DayReminder(List<TrackerCheckList> lstUsers)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;


            User LoggedInUser = new User();
            strFromEmail = ConfigurationManager.AppSettings["FromEmailAddress"].ToString();
            string EmailTemplatePath = ConfigurationManager.AppSettings["EmailTemplateFilePath"].ToString();

            if (!string.IsNullOrEmpty(strFromEmail))
            {

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.TRACKER_REMIDER_EMAIL;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

                IEnumerable<int> UserIDS = lstUsers.OrderBy(x => x.GroupName).Select(x => x.ApprovalUserId).Distinct();

                foreach (var userid in UserIDS)
                {
                    List<TrackerCheckList> emailUsers = lstUsers.Where(x => x.ApprovalUserId == userid).OrderBy(x => x.CatSequenceNo).OrderBy(x => x.CLSequenceNo).ToList();
                    string strTable = "<table style='border:1px solid #000 ;border-collapse:collapse''><thead><tr><th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Category</th>";
                    strTable = strTable + "<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Tracker Item</th>";
                    strTable = strTable + "<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Due Date</th>";
                    strTable = strTable + "<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Status</th>";
                    strTable = strTable + "<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Remarks</th>";
                    strTable = strTable + "<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Completion Date</th>";
                    strTable = strTable + "</tr></thead>";
                    foreach (var user in emailUsers)
                    {
                        string strclass = string.Empty;
                        if (!string.IsNullOrEmpty(user.Status))
                        {
                            strclass = "background:#ffffff";
                        }
                        else
                        {
                            strclass = "background:#fff5c2";
                        }
                        strTable = strTable + "<tr>";
                        strTable = strTable + "<td style='" + strclass + "' >" + user.CategoryName + "</td>";
                        strTable = strTable + "<td style='" + strclass + "' >" + user.CheckListName + "</td>";
                        strTable = strTable + "<td style='" + strclass + "' >" + user.ExpectedCompletionDate.ToShortDateString() + "</td>";
                        if (!string.IsNullOrEmpty(user.Status))
                        {
                            strTable = strTable + "<td style='" + strclass + "' >" + user.Status + "</td>";
                            strTable = strTable + "<td style='" + strclass + "' >" + user.ApprovalRemarks + "</td>";
                            strTable = strTable + "<td style='" + strclass + "' >" + user.ActualCompletionDate.ToShortDateString() + "</td>";
                        }
                        else
                        {
                            strTable = strTable + "<td style='" + strclass + "' >" + "</td>";
                            strTable = strTable + "<td style='" + strclass + "' >" + "</td>";
                            strTable = strTable + "<td style='" + strclass + "' >" + "</td>";
                        }
                        strTable = strTable + "</tr>";
                    }

                    strTable = strTable + "</table>";
                    string emailBody = System.IO.File.ReadAllText(EmailTemplatePath + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;

                    strEmailSubject = strEmailSubject.Replace("<%DealershipName%>", Convert.ToString(emailUsers[0].DealershipName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(emailUsers[0].AreaOffice));
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(emailUsers[0].InstallationCode));


                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(emailUsers[0].DealershipName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(emailUsers[0].AreaOffice));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(emailUsers[0].InstallationCode));

                    if (emailBody.Contains("<%ApprovalUserName%>"))
                        emailBody = emailBody.Replace("<%ApprovalUserName%>", Convert.ToString(emailUsers[0].ApprovalUserName));

                    if (emailBody.Contains("<%Table%>"))
                        emailBody = emailBody.Replace("<%Table%>", Convert.ToString(strTable));



                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    string imgEmailLogo = "/Images/email-logo.png";
                    string imgEmailHeader = "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + loginUrl + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + loginUrl + imgEmailHeader + "' />");
                    strEmailBody = emailBody;


                    EmailSender emailSender = new EmailSender(strFromEmail, emailUsers[0].ApprovalEmailAddress, strCcEmail, strEmailSubject, strEmailBody);
                    emailSender.IsBodyHtml = true;
                    emailSender.SendEmail();
                    EmailTemplateMaster objLog = new EmailTemplateMaster()
                    {
                        UserId = LoggedInUser.UserId,
                        InstallationId = emailUsers[0].InstallationId,
                        EmailTo = emailUsers[0].ApprovalEmailAddress,
                        EmaiFrom = strFromEmail,
                        EmailBody = strEmailBody,
                        EmailType = emailTemplateMaster.EmailType,
                        EmailSubject = strEmailSubject
                    };
                    _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                }
            }
        }
        public void SendCodeBlockingReminderEmails(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;

            strFromEmail = ConfigurationManager.AppSettings["FromEmailAddress"].ToString();
            string EmailTemplatePath = ConfigurationManager.AppSettings["EmailTemplateFilePath"].ToString();

            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.CODE_BLOCKING_REMINDER_EMAIL;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();

                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }

                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(EmailTemplatePath + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                    strEmailSubject = emailTemplateMaster.EmailSubject;

                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%Date%>"))
                        emailBody = emailBody.Replace("<%Date%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%Date%>"))
                        emailBody = emailBody.Replace("<%Date%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    string imgEmailLogo = "/Images/email-logo.png";
                    string imgEmailHeader = "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + loginUrl + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + loginUrl + imgEmailHeader + "' />");

                    InfraPickDetailsMaster infraPickDetailsMaster = new InfraPickDetailsMaster();
                    infraPickDetailsMaster.InstallationId = installationRequest.InstallationId;

                    List<InfraPickDetailsMaster> lstInfraDev = _IInfraPickDetailsMasterService.GetDueActionItems(infraPickDetailsMaster).ToList();
                    List<InfraPickDetailsMaster> lstInfraActions = lstInfraDev.Where(x => x.DocumentType == "Docs").ToList();
                    List<InfraPickDetailsMaster> lstExihitbitactions = lstInfraDev.Where(x => x.DocumentType == "Exihitbit").ToList();
                    StringBuilder sb = new StringBuilder();


                    //if (lstInfraActions != null && lstInfraActions.Count > 0)
                    //{
                    //    sb.Append("<table style='border:1px solid #000 ;border-collapse:collapse'>" +
                    //        "<thead><tr><th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'>Infra Doc. Name</th>");
                    //    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'>DBM Remarks</th>");
                    //    sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'>Due Date</th>");
                    //    sb.Append("</tr></thead>");
                    //    foreach (InfraPickDetailsMaster infraPic in lstInfraActions)
                    //    {
                    //        sb.Append("<tr>");
                    //        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.DocumentName + "</td>");
                    //        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.DBMRemarks + "</td>");
                    //        sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.ActionCompDate.ToString("dd/MMM/yyyy") + "</td>");
                    //        sb.Append("</tr>");
                    //    }
                    //    sb.Append("</table>");
                    //}
                    //sb.Append("<div>&nbsp;</div>");
                    if (lstExihitbitactions != null && lstExihitbitactions.Count > 0)
                    {
                        sb.Append("<table style='border:1px solid #000 ;border-collapse:collapse''><thead>" +
                        "<tr><th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'>Head</th>");
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'>Parameter</th>");
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'>Planned Date</th>");
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'>Target Date</th></thead>");
                        sb.Append("</tr>");
                        foreach (InfraPickDetailsMaster infraPic in lstExihitbitactions)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.DocumentName + "</td>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.ParameterName + "</td>");
                            //CreatedDate as Planed Date 
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + Convert.ToDateTime(infraPic.CreatedDate).ToString("dd/MMM/yyyy") + "</td>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.ActionCompDate.ToString("dd/MMM/yyyy") + "</td>");
                            sb.Append("</tr>");
                        }
                        sb.Append("</table>");
                    }
                    if (emailBody.Contains("<%ActionItems%>"))
                        emailBody = emailBody.Replace("<%ActionItems%>", sb.ToString());
                    strEmailBody = emailBody;

                    foreach (User User in emailUsers)
                    {
                        string StrEmail = strEmailBody;
                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(User.EmailAddress))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, User.EmailAddress, strCcEmail, strEmailSubject, strEmailBody);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            _InstallationRequestService.UpdateCodeBlockingEmailSent(installationRequest);
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                InstallationId = installationRequest.InstallationId,
                                EmailTo = User.EmailAddress,
                                EmaiFrom = strFromEmail,
                                EmailBody = StrEmail,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }
                }
            }
        }
        public void SendDeviationActionItemsReminderEmails()
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            strFromEmail = ConfigurationManager.AppSettings["FromEmailAddress"].ToString();
            string EmailTemplateFilePath = ConfigurationManager.AppSettings["EmailTemplateFilePath"].ToString();

            InstallationRequest installationRequest = new InstallationRequest();
            installationRequest.CurrentDate = Utility.GetTimingList();

            List<InstallationRequest> lstInstallationRequest = _InstallationRequestService.SendDeviationActionItemReminderEmail(installationRequest).ToList();


            InfraPicFiles InfraPicFiles = new InfraPicFiles();
            string[] strIds = lstInstallationRequest.Select(x => Convert.ToString(x.InstallationId)).ToList().ToArray();
            InfraPicFiles.InstallationIds = string.Join(",", strIds);

            List<InfraPicFiles> infraPicFiles = _IInfraPicFilesService.GetPendingDeviationActionItems(InfraPicFiles).ToList();

            foreach (InstallationRequest objinstallationRequest in lstInstallationRequest)
            {
                List<InfraPicFiles> lstInfraPics = infraPicFiles.Where(x => x.InstallationId == objinstallationRequest.InstallationId).ToList();
                if (lstInfraPics.Count > 0)
                {

                    EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.DEVIATION_ACTION_ITEMS_REMINDER;
                    emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

                    if (!string.IsNullOrEmpty(objinstallationRequest.EmailAddress))
                    {
                        List<string> lstTo = new List<string>();
                        string ToEmailAddresses = installationRequest.EmailAddress;
                        string CcEmailAddresses = string.Empty;

                        List<string> lstToAlreadyExists = new List<string>();
                        List<string> lstCcAlreadyExists = new List<string>();
                        string _to = string.Empty, _cc = string.Empty;

                        strToEmail = objinstallationRequest.EmailAddress;
                        string emailBody = System.IO.File.ReadAllText(EmailTemplateFilePath + emailTemplateMaster.EmailTemplateFile);
                        string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);

                        strEmailSubject = emailTemplateMaster.EmailSubject;

                        strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                        strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                        strEmailSubject = strEmailSubject.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));
                        strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                        if (emailBody.Contains("<%InstallationCode%>"))
                            emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                        if (emailBody.Contains("<%Location%>"))
                            emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                        if (emailBody.Contains("<%AreaOffice%>"))
                            emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                        if (emailBody.Contains("<%DealershipName%>"))
                            emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));


                        if (emailBody.Contains("<%InitiatorName%>"))
                            emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                        if (emailBody.Contains("<%Date%>"))
                            emailBody = emailBody.Replace("<%Date%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                        if (emailBody.Contains("<%LoginUrl%>"))
                            emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                        string imgEmailLogo = "/Images/email-logo.png";
                        string imgEmailHeader = "/Images/email-header-bg.png";

                        if (emailBody.Contains("<%Img_EmailLogo%>"))
                            emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + loginUrl + imgEmailLogo + "' alt='Logo' />");
                        if (emailBody.Contains("<%Img_EmailHeader%>"))
                            emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + loginUrl + imgEmailHeader + "' />");

                        StringBuilder sb = new StringBuilder();
                        sb.Append("<table border=1><tr>" 
                                 +"<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Exihibit Head</th>");
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Exihibit Para</th>");
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Planned Date</th>");
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Target Completion Date</th>");
                        sb.Append("</tr>");
                        foreach (InfraPicFiles infraPic in lstInfraPics)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.DocumentName + "</td>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.FileName + "</td>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.ActionCompletedDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + infraPic.ActionCompDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                            sb.Append("</tr>");
                        }
                        sb.Append("</table>");
                        if (emailBody.Contains("<%ActionItems%>"))
                            emailBody = emailBody.Replace("<%ActionItems%>", sb.ToString());


                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, emailBody);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                InstallationId = objinstallationRequest.InstallationId,
                                EmailTo = strToEmail,
                                EmaiFrom = strFromEmail,
                                EmailBody = emailBody,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }

                    }
                }
            }
        }

        public void SendExitESclationEmail()
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            strFromEmail = ConfigurationManager.AppSettings["FromEmailAddress"].ToString();
            string EmailTemplateFilePath = ConfigurationManager.AppSettings["EmailTemplateFilePath"].ToString();

            DealerExitCheckList DealerExitCheckList = new DealerExitCheckList();
            DealerExitCheckList.CurrentDate = Utility.GetTimingList();
            List<DealerExitCheckList> lstDealerExitCheckList = _IDealerExitCheckListService.GetExitCheckListForreminder(DealerExitCheckList).ToList();

            List<DealerExitCheckList> lstDisExitCode = null;

            EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
            emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EXIT_ESCLATION_EMAIL;
            emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

            if (lstDealerExitCheckList != null)
            {
                lstDisExitCode = lstDealerExitCheckList.DistinctBy(x => x.ExitId).ToList();
            }
            foreach (DealerExitCheckList objExit in lstDisExitCode)
            {
                string[] arrGroupId = lstDealerExitCheckList.Where(x => x.ExitId == objExit.ExitId).ToList().DistinctBy(x => x.GroupId).
                    Select(x => Convert.ToString(x.GroupId)).ToList().ToArray();

                string GroupId = string.Join(",", arrGroupId);

                User user = new User();
                user.GroupId = GroupId;
                user.ExitId = objExit.ExitId;
                List<User> lstUserEmail = _IUserService.GetUsersToSendEsclationEmail(user).ToList();

                foreach (string grpId in arrGroupId)
                {
                    List<DealerExitCheckList> lstPendingList = lstDealerExitCheckList.Where(x => x.ExitId == objExit.ExitId && x.GroupId == grpId).ToList();
                    List<User> lstGroupManager = lstUserEmail.Where(x => x.GroupId == grpId).ToList();
                    string TrackingId = string.Empty;

                    foreach (User usr in lstGroupManager.Where(x => (!string.IsNullOrEmpty(x.EmailAddress))).ToList())
                    {
                        List<string> lstTo = new List<string>();
                        string ToEmailAddresses = usr.EmailAddress;
                        string CcEmailAddresses = string.Empty;

                        List<string> lstToAlreadyExists = new List<string>();
                        List<string> lstCcAlreadyExists = new List<string>();
                        string _to = string.Empty, _cc = string.Empty;

                        strToEmail = usr.EmailAddress;

                        string emailBody = System.IO.File.ReadAllText(EmailTemplateFilePath + emailTemplateMaster.EmailTemplateFile);
                        string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);
                        strEmailSubject = emailTemplateMaster.EmailSubject;

                        strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objExit.LocationName));
                        strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objExit.StateName));
                        strEmailSubject = strEmailSubject.Replace("<%DealerShipName%>", Convert.ToString(objExit.DealerName));
                        strEmailSubject = strEmailSubject.Replace("<%ExitCode%>", Convert.ToString(objExit.ExitCode));
                        strEmailSubject = strEmailSubject.Replace("<%DealerSapCode%>", Convert.ToString(objExit.DealerSapCode));

                        if (emailBody.Contains("<%ExitCode%>"))
                            emailBody = emailBody.Replace("<%ExitCode%>", Convert.ToString(objExit.ExitCode));

                        if (emailBody.Contains("<%Location%>"))
                            emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objExit.LocationName));

                        if (emailBody.Contains("<%DealerSapCode%>"))
                            emailBody = emailBody.Replace("<%DealerSapCode%>", Convert.ToString(objExit.DealerSapCode));

                        if (emailBody.Contains("<%AreaOffice%>"))
                            emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objExit.StateName));

                        if (emailBody.Contains("<%DealershipName%>"))
                            emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objExit.DealerName));


                        if (emailBody.Contains("<%Location%>"))
                            emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objExit.LocationName));

                        if (emailBody.Contains("<%LoginUrl%>"))
                            emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                        if (emailBody.Contains("<%InitiatorName%>"))
                            emailBody = emailBody.Replace("<%InitiatorName%>", objExit.Name);


                        string imgEmailLogo = "/Images/email-logo.png";
                        string imgEmailHeader = "/Images/email-header-bg.png";

                        if (emailBody.Contains("<%Img_EmailLogo%>"))
                            emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + loginUrl + imgEmailLogo + "' alt='Logo' />");
                        if (emailBody.Contains("<%Img_EmailHeader%>"))
                            emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + loginUrl + imgEmailHeader + "' />");

                        StringBuilder sb = new StringBuilder();
                        sb.Append("<table style='border:1px solid #000 ;border-collapse:collapse''><tr><th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> CheckList Name</th>");
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Group Name</th>");
                        sb.Append("<th style='text-align: left;font-size: 11px;color: #000000;background: #ededed;border: 1px solid #d8dadb;padding: 6px 8px;vertical - align: middle'> Due Date</th>");
                        sb.Append("</tr>");
                        TrackingId = string.Empty;

                        foreach (DealerExitCheckList checklist in lstPendingList)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + checklist.Description + "</td>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + checklist.GroupName + "</td>");
                            sb.Append("<td style='font-size: 11px;background: #ffffff;text-align: left;border: 1px solid #d8dadb;padding: 6px 8px;'>" + checklist.ExpectedCompletionDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                            sb.Append("</tr>");
                            TrackingId = TrackingId + checklist.TrackingId + ",";
                        }
                        sb.Append("</table>");

                        if (emailBody.Contains("<%ActionItems%>"))
                            emailBody = emailBody.Replace("<%ActionItems%>", sb.ToString());

                        if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                        {
                            EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, emailBody);
                            emailSender.IsBodyHtml = true;
                            emailSender.SendEmail();
                            EmailTemplateMaster objLog = new EmailTemplateMaster()
                            {
                                EmailTo = strToEmail,
                                EmaiFrom = strFromEmail,
                                EmailBody = emailBody,
                                EmailType = emailTemplateMaster.EmailType,
                                EmailSubject = strEmailSubject
                            };
                            _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                        }
                    }
                    if (!string.IsNullOrEmpty(TrackingId))
                    {
                        DealerExitCheckList objLoger = new DealerExitCheckList();
                        objLoger.ExitId = objExit.ExitId;
                        objLoger.GroupId = grpId;
                        objLoger.TrackingId = TrackingId.TrimEnd(',');
                        _IDealerExitCheckListService.UpdateEsclationEmailLog(objLoger);
                    }
                }
            }
        }


        public List<User> GetScopeUsers(InstallationRequest installationRequest)
        {

            EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
            emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.TRACKER_INITIATION_EMAIL;
            emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
            List<User> emailUsers = _IUserService.GetUsersToSendEmails_Tracker(new User() { InstallationId = installationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId, DealerSapCode = installationRequest.DealerSapCode }).ToList();
            return emailUsers;
        }

        public void SendCodeBlockedEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.CODEBLOCKED_EMAIL;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendBlockCodeEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.BLOCKCODE_EMAIL;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void InitiatedAccountingViewDocsEmail(InstDocTracker instDocTracker)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = instDocTracker.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(objinstallationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.ACC_VIEW_DOCS_INITIATED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.AccountViewStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%SDNRemarks%>"))
                        emailBody = emailBody.Replace("<%SDNRemarks%>", Convert.ToString(objinstallationRequest.SDNRemarks));

                    if (emailBody.Contains("<%Status%>"))
                        emailBody = emailBody.Replace("<%Status%>", Convert.ToString(objinstallationRequest.AccountViewStatus));


                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%ClickHere%>"))
                        emailBody = emailBody.Replace("<%ClickHere%>", "<a href='" + loginUrl + "' >Click here</a>");

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendActionItemsClosedRevisionReqExhibitEmail(InstallationRequest installationRequest, List<ExhibitParameterTracker> lstExhibitParaTrack = null, string Status = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                if (Status == "Revision")
                {
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_INFRAACTIONITEMS_REVISION;
                    lstExhibitParaTrack = lstExhibitParaTrack.Where(x => x.DeviationStatus == CommonKeys.EXHIBIT_ACTION_REVISION).ToList();
                }
                else
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_INFRAACTIONITEMS_CLOSED;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;

                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));


                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    StringBuilder sb = new StringBuilder();
                    sb.Append("<table border=1><tr><th>Head Name</th>");
                    sb.Append("<th>Parameter Name</th>");
                    sb.Append("<th>Status</th>");
                    sb.Append("<th>DDHead Remarks</th>");
                    sb.Append("<th>Target Date of Completion</th>");
                    sb.Append("</tr>");
                    foreach (ExhibitParameterTracker SingleObj in lstExhibitParaTrack)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td>" + SingleObj.ExibitHeadName + "</td>");
                        sb.Append("<td>" + SingleObj.ParameterName + "</td>");
                        sb.Append("<td>" + SingleObj.CompletionStatus + "</td>");
                        sb.Append("<td>" + SingleObj.DDHeadRemarks + "</td>");
                        sb.Append("<td>" + SingleObj.TargetDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                        sb.Append("</tr>");
                    }
                    sb.Append("</table>");

                    if (emailBody.Contains("<%ActionList%>"))
                        emailBody = emailBody.Replace("<%ActionList%>", sb.ToString());

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";


                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendActionCompletedExhibitEmail(InstallationRequest installationRequest, List<ExhibitParameterTracker> lstExhibitParaTrack = null)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                if (objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DEVIATION_ACTION_INITIATOR_BRANCH;
                else
                    emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.EMAIL_DEVIATION_ACTION_INITIATOR;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);

                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;

                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));



                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);


                    StringBuilder sb = new StringBuilder();
                    sb.Append("<table border=1><tr><th>Head Name</th>");
                    sb.Append("<th>Parameter Name</th>");
                    sb.Append("<th>Status</th>");
                    sb.Append("<th>DDHead Remarks</th>");
                    sb.Append("<th>Target Date of Completion</th>");
                    sb.Append("</tr>");
                    foreach (ExhibitParameterTracker SingleObj in lstExhibitParaTrack)
                    {
                        sb.Append("<tr>");
                        sb.Append("<td>" + SingleObj.ExibitHeadName + "</td>");
                        sb.Append("<td>" + SingleObj.ParameterName + "</td>");
                        sb.Append("<td>" + SingleObj.CompletionStatus + "</td>");
                        sb.Append("<td>" + SingleObj.DDHeadRemarks + "</td>");
                        sb.Append("<td>" + SingleObj.TargetDate.Value.ToString("dd/MMM/yyyy") + "</td>");
                        sb.Append("</tr>");
                    }
                    sb.Append("</table>");

                    if (emailBody.Contains("<%ActionList%>"))
                        emailBody = emailBody.Replace("<%ActionList%>", sb.ToString());

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";


                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }

        }

        public void SendAgreementExecutedRevisionEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);
                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();
                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.AGREEMENT_EXECUTED_REVISION;
                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.CodeCreationStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));
                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    if (emailBody.Contains("<%CodeCreationRemarks%>"))
                        emailBody = emailBody.Replace("<%CodeCreationRemarks%>", Convert.ToString(objinstallationRequest.CodeCreationRemarks));

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }

        public void SendInfraPicDeviationApprovedAdminEmail(InstallationRequest installationRequest)
        {
            string strFromEmail = string.Empty;
            string strToEmail = string.Empty;
            string strCcEmail = string.Empty;
            string strEmailSubject = string.Empty;
            string strEmailBody = string.Empty;
            User LoggedInUser = new User();
            if (JDDOASession.IsInSession(SessionKeys.CurrentUser))
            {
                LoggedInUser = (User)JDDOASession.GetDirectValue(SessionKeys.CurrentUser);
                strFromEmail = LoggedInUser.EmailAddress;
            }
            if (!string.IsNullOrEmpty(strFromEmail))
            {
                InstallationRequest objinstallationRequest = new InstallationRequest();
                objinstallationRequest.InstallationId = installationRequest.InstallationId;
                objinstallationRequest = _InstallationRequestService.GetInstallationRequestForEmail(installationRequest);

                EmailTemplateMaster emailTemplateMaster = new EmailTemplateMaster();

                emailTemplateMaster.EmailTemplateId = EmailTemplateMaster_Constants.INFRAPIC_DEVIATIONAPPROVED_ADMIN;

                emailTemplateMaster = _IEmailTemplateMasterService.Get(emailTemplateMaster);
                List<User> emailUsers = _IUserService.GetUsersToSendEmails(new User() { InstallationId = objinstallationRequest.InstallationId, EmailTemplateId = emailTemplateMaster.EmailTemplateId }).ToList();
                if (emailUsers.Count > 0)
                {
                    List<string> lstTo = new List<string>();
                    string ToEmailAddresses = string.Empty;
                    string CcEmailAddresses = string.Empty;

                    List<string> lstToAlreadyExists = new List<string>();
                    List<string> lstCcAlreadyExists = new List<string>();
                    string _to = string.Empty, _cc = string.Empty;

                    foreach (User user in emailUsers)
                        if (!string.IsNullOrEmpty(user.EmailAddress))
                        {
                            _to = user.EmailAddress.ToLower().Trim();
                            if (lstToAlreadyExists.Where(x => x == _to).Count() == 0)
                            {
                                ToEmailAddresses = ToEmailAddresses + _to + ",";
                                lstToAlreadyExists.Add(_to);
                            }
                        }
                    ToEmailAddresses = ToEmailAddresses.Trim(',');
                    strToEmail = ToEmailAddresses;
                    string emailBody = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/EmailTemplates/") + emailTemplateMaster.EmailTemplateFile);
                    string loginUrl = Convert.ToString(ConfigurationManager.AppSettings["LoginUrl"]);


                    strEmailSubject = emailTemplateMaster.EmailSubject;
                    strEmailSubject = strEmailSubject.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));
                    strEmailSubject = strEmailSubject.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));
                    strEmailSubject = strEmailSubject.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));
                    strEmailSubject = strEmailSubject.Replace("<%Status%>", Convert.ToString(objinstallationRequest.InfraStatus));

                    if (emailBody.Contains("<%InstallationCode%>"))
                        emailBody = emailBody.Replace("<%InstallationCode%>", Convert.ToString(objinstallationRequest.InstallationCode));

                    if (emailBody.Contains("<%Location%>"))
                        emailBody = emailBody.Replace("<%Location%>", Convert.ToString(objinstallationRequest.LocationName));

                    if (emailBody.Contains("<%AreaOffice%>"))
                        emailBody = emailBody.Replace("<%AreaOffice%>", Convert.ToString(objinstallationRequest.StateName));

                    if (emailBody.Contains("<%DealershipName%>"))
                        emailBody = emailBody.Replace("<%DealershipName%>", Convert.ToString(objinstallationRequest.DealerName));

                    if (emailBody.Contains("<%InitiatorName%>"))
                        emailBody = emailBody.Replace("<%InitiatorName%>", Convert.ToString(objinstallationRequest.Name));

                    if (emailBody.Contains("<%CreatedDate%>"))
                        emailBody = emailBody.Replace("<%CreatedDate%>", Convert.ToDateTime(objinstallationRequest.CreatedDate).ToString("dd-MMM-yyyy"));

                    string msgBodySubject = "Please initiate code unblocking.";
                    if (objinstallationRequest.RequestType.ToLower() == CommonKeys.REQUEST_TYPE_DEALER_BRANCH.ToLower())
                    {
                        msgBodySubject = "";
                    }

                    if (emailBody.Contains("<%msgBodySubject%>"))
                        emailBody = emailBody.Replace("<%msgBodySubject%>", msgBodySubject);

                    if (emailBody.Contains("<%LoginUrl%>"))
                        emailBody = emailBody.Replace("<%LoginUrl%>", loginUrl);

                    string imgEmailLogo = loginUrl + "/Images/email-logo.png";
                    string imgEmailHeader = loginUrl + "/Images/email-header-bg.png";

                    if (emailBody.Contains("<%Img_EmailLogo%>"))
                        emailBody = emailBody.Replace("<%Img_EmailLogo%>", "<img src='" + imgEmailLogo + "' alt='Logo' />");
                    if (emailBody.Contains("<%Img_EmailHeader%>"))
                        emailBody = emailBody.Replace("<%Img_EmailHeader%>", "<img src='" + imgEmailHeader + "' />");
                    strEmailBody = emailBody;

                    if (!string.IsNullOrEmpty(strFromEmail) && !string.IsNullOrEmpty(strToEmail))
                    {
                        EmailSender emailSender = new EmailSender(strFromEmail, strToEmail, strCcEmail, strEmailSubject, strEmailBody);
                        emailSender.IsBodyHtml = true;
                        emailSender.SendEmail();
                        EmailTemplateMaster objLog = new EmailTemplateMaster()
                        {
                            UserId = LoggedInUser.UserId,
                            InstallationId = objinstallationRequest.InstallationId,
                            EmailTo = strToEmail,
                            EmaiFrom = strFromEmail,
                            EmailBody = strEmailBody,
                            EmailType = emailTemplateMaster.EmailType,
                            EmailSubject = strEmailSubject
                        };
                        _IEmailTemplateMasterService.UpdateEmailLog(objLog);
                    }
                }
            }
        }
    }
}
